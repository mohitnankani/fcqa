{"version":3,"file":"credentials.js","sources":["../../dependency-sets/credentials/services/ssCredentialBusinessEngineSvc/credential-business-engine.js","../../dependency-sets/credentials/services/ssCredentialDataAccessSvc/credential-data-access.js","../../dependency-sets/credentials/services/ssCredentialFactorySvc/credential-factory.js","../../dependency-sets/credentials/services/ssCredentialViewModelFactorySvc/credential-view-model-factory.js"],"sourcesContent":["/*@ngInject*/\r\nfunction ssCredentialBusinessEngineSvc(moment) {\r\n\t// #-------------------------------------------------# //\r\n\t// #---- Service (ssCredentialBusinessEngineSvc) ----# //\r\n\r\n\tconst CREDENTIAL_EXPIRING_IN_DAYS = 30;\r\n\tconst CREDENTIAL_NEW = 'initial';\r\n\tconst CREDENTIAL_RENEWED = 'renewal';\r\n\tconst CREDENTIAL_IN_PROGRESS = 'inprogress';\r\n\tconst IN_PROGRESS = CREDENTIAL_IN_PROGRESS;\r\n\tconst ACTIVE = 'active';\r\n\tconst NOT_ACTIVE = 'notActive';\r\n\tconst CERTIFICATE_LICENSE = '0';\r\n\tconst CLEARANCES = '1';\r\n\tconst DRIVER_LICENSE = '2';\r\n\tconst OTHERS = '3';\r\n\tconst STATE_NATIONAL = '0';\r\n\tconst DISTRICT_CUSTOM = '1';\r\n\tconst ALL_CONSTANTS = {\r\n\t\tACTIVE,\r\n\t\tNOT_ACTIVE,\r\n\t\tIN_PROGRESS,\r\n\t\tCREDENTIAL_NEW,\r\n\t\tCREDENTIAL_RENEWED,\r\n\t\tCREDENTIAL_INPROGRESS: CREDENTIAL_IN_PROGRESS, // for backwards compatibility\r\n\t\tCREDENTIAL_IN_PROGRESS, // use this one going forward\r\n\t\tCERTIFICATE_LICENSE,\r\n\t\tCLEARANCES,\r\n\t\tDRIVER_LICENSE,\r\n\t\tOTHERS,\r\n\t\tSTATE_NATIONAL,\r\n\t\tDISTRICT_CUSTOM\r\n\t};\r\n\tconst ALL_POSSIBLE_CREDENTIAL_STATUS = [\r\n\t\t{ value: ACTIVE, label: 'Active' },\r\n\t\t{ value: NOT_ACTIVE, label: 'Not Active (Expired)' },\r\n\t\t{ value: IN_PROGRESS, label: 'In Progress - State Approved Education Program' }\r\n\t];\r\n\r\n\t// External service API\r\n\treturn {\r\n\t\tcredentialConstants: ALL_CONSTANTS,\r\n\t\tallCredentialStatuses: ALL_POSSIBLE_CREDENTIAL_STATUS,\r\n\t\tgetCredentialStatus,\r\n\t\tisExpiring,\r\n\t\tisExpired,\r\n\t\tupdatedCredentialState,\r\n\t\tissuedReasonByCredentialStatus,\r\n\t\tisVerifierValid,\r\n\t\tfilterCredentialList\r\n\t};\r\n\r\n\tfunction filterCredentialList(credentialList) {\r\n\t\tconst _sortByDates = (a, b) => new Date(b) - new Date(a);\r\n\t\tconst fullList = credentialList.slice().sort((a, b) => _sortByDates(a._stateStartedDay, b._stateStartedDay));\r\n\t\tconst { recent, archive } = fullList.reduce((acc, item) => {\r\n\t\t\tlet trackerId = item._credential.id;\r\n\r\n\t\t\tif (item._subjects && item._subjects.length) {\r\n\t\t\t\ttrackerId = `${trackerId}_${item._subjects.map(s => s.id).sort().join('_')}`;\r\n\t\t\t}\r\n\r\n\t\t\tif (acc.tracker[trackerId] == null) {\r\n\t\t\t\tacc.tracker[trackerId] = true;\r\n\t\t\t\tacc.recent.push(item);\r\n\t\t\t} else {\r\n\t\t\t\tacc.archive.push(item);\r\n\t\t\t}\r\n\t\t\treturn acc;\r\n\t\t}, { tracker: {}, recent: [], archive: [] });\r\n\t\treturn {\r\n\t\t\trecent: recent.sort((a, b) => _sortByDates(a._createdUtc, b._createdUtc)),\r\n\t\t\tarchive: archive.sort((a, b) => _sortByDates(a._createdUtc, b._createdUtc))\r\n\t\t};\r\n\t}\r\n\r\n\tfunction isVerifierValid(credential, loggedInUserKey) {\r\n\t\tif (credential._id == null) { return true; } // Credential is new and we don't care\r\n\t\treturn (credential.verifier && credential.verifier.employeeId === loggedInUserKey);\r\n\t}\r\n\r\n\tfunction issuedReasonByCredentialStatus(credentialStatus, isRenewal = false) {\r\n\t\tif (credentialStatus === ALL_CONSTANTS.IN_PROGRESS && isRenewal) { throw 'Renewal should not be true when credential is in Progress'; }\r\n\t\tif (![ALL_CONSTANTS.ACTIVE, ALL_CONSTANTS.NOT_ACTIVE, ALL_CONSTANTS.IN_PROGRESS].includes(credentialStatus)) { throw 'Invalid credential status'; }\r\n\t\tif (credentialStatus === ALL_CONSTANTS.IN_PROGRESS) {\r\n\t\t\treturn ALL_CONSTANTS.CREDENTIAL_IN_PROGRESS;\r\n\t\t}\r\n\t\tif (isRenewal) {\r\n\t\t\treturn ALL_CONSTANTS.CREDENTIAL_RENEWED;\r\n\t\t}\r\n\t\treturn ALL_CONSTANTS.CREDENTIAL_NEW;\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have labels for the dates\r\n\t *\r\n\t * @param {object} credential Credential object that needs to be copied.\r\n\t * @param {object} object object that needs to be applied on the copy.\r\n\t * @returns\r\n\t */\r\n\tfunction updatedCredentialState(credential, object) {\r\n\t\treturn Object.assign({}, credential, object);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the status of the given credential\r\n\t *\r\n\t * @param {any} credential Any credential to calculate the status.\r\n\t * @returns\r\n\t */\r\n\tfunction getCredentialStatus(credential, asOf) {\r\n\t\tif (!asOf) { throw new Error('asOf is a required moment object.'); }\r\n\t\tif (!credential) { throw new Error('Credential object is not Provided for status computation.'); }\r\n\t\t_throwIfNotValidIssuedReason(credential);\r\n\t\tif (credential._stateStartedDay && !credential._issuedReason) { throw new Error('Issued reason cannot be null with stateStartedDay date provided.'); }\r\n\t\tif (moment(credential._stateStartedDay).isAfter(moment(credential._expirationDay))) { throw new Error('Credential expiration date cannot be before issue date.'); }\r\n\r\n\t\tif (_credentialIsActive(credential, asOf)) { return ALL_POSSIBLE_CREDENTIAL_STATUS.find(s => s.value === ACTIVE); }\r\n\r\n\t\tif (_credentialIsNotActive(credential, asOf)) { return ALL_POSSIBLE_CREDENTIAL_STATUS.find(s => s.value === NOT_ACTIVE); }\r\n\r\n\t\tif (_credentialIsInProgress(credential)) { return ALL_POSSIBLE_CREDENTIAL_STATUS.find(s => s.value === IN_PROGRESS); }\r\n\r\n\t\tthrow new Error('Credential metadata does not fit any status criteria');\r\n\t}\r\n\r\n\t/**\r\n\t * Tell if the credential is expiring in next 30 days\r\n\t *\r\n\t * @param {any} credential Any credential to calculate the status.\r\n\t * @returns\r\n\t */\r\n\tfunction isExpiring(credential, asOf) {\r\n\t\tif (!asOf) { throw 'asOf is a required moment object.'; }\r\n\t\tif (_credentialIsActive(credential, asOf)) {\r\n\t\t\tlet expirationDate = moment(credential._expirationDay);\r\n\t\t\treturn expirationDate.diff(asOf, 'days') <= CREDENTIAL_EXPIRING_IN_DAYS;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tell if the credential is expiring in next 30 days\r\n\t *\r\n\t * @param {any} credential Any credential to calculate the status.\r\n\t * @returns\r\n\t */\r\n\tfunction isExpired(credential, asOf) {\r\n\t\tif (!asOf) { throw 'asOf is a required moment object.'; }\r\n\t\tlet expirationDate = moment(credential._expirationDay);\r\n\t\treturn asOf.isAfter(expirationDate);\r\n\t}\r\n\r\n\t/* ------------------------ Private Function Section Start ------------------------ */\r\n\tfunction _throwIfNotValidIssuedReason(credential) {\r\n\t\tif (!credential._issuedReason) {\r\n\t\t\tthrow new TypeError('_issuedReason is a required property');\r\n\t\t}\r\n\t\tif (![CREDENTIAL_NEW, CREDENTIAL_RENEWED, CREDENTIAL_IN_PROGRESS].includes(credential._issuedReason)) {\r\n\t\t\tthrow new Error(`Only Issued reasons supported are \"Initial\" or \"Renewal\" or \"In Progress\" but we received ${credential._issuedReason}`);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _credentialIsActive(credential, asOf) {\r\n\t\tif (!asOf) { throw 'asOf is a required moment object.'; }\r\n\t\t// Has to be an initial or a renewal to be active\r\n\t\t_throwIfNotValidIssuedReason(credential);\r\n\t\tif (![CREDENTIAL_NEW, CREDENTIAL_RENEWED].includes(credential._issuedReason)) { return false; }\r\n\t\tif (!credential._expirationDay) {\r\n\t\t\tthrow new TypeError('credential._expirationDay is required');\r\n\t\t}\r\n\t\treturn isExpirationInFuture();\r\n\r\n\t\tfunction isExpirationInFuture() {\r\n\t\t\treturn moment(credential._expirationDay).isSameOrAfter(asOf);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _credentialIsNotActive(credential, asOf) {\r\n\t\tif (!credential._stateStartedDay) { throw new TypeError('credential._stateStartedDay is required'); }\r\n\t\tif (!credential._expirationDay) { throw new TypeError('credential._expirationDay is required'); }\r\n\t\treturn (moment(credential._stateStartedDay).isValid() && moment(credential._expirationDay).isValid() &&\r\n\t\t\tmoment(credential._expirationDay).isBefore(asOf));\r\n\t};\r\n\r\n\tfunction _credentialIsInProgress(credential) {\r\n\t\tif (!credential._stateStartedDay) { throw new TypeError('credential._stateStartedDay is required'); }\r\n\t\t_throwIfNotValidIssuedReason(credential);\r\n\t\treturn credential._issuedReason === CREDENTIAL_IN_PROGRESS;\r\n\t}\r\n\r\n\t/* ------------------------ Private Function Section End ------------------------ */\r\n\r\n\t// #-- END Service (ssCredentialBusinessEngineSvc) --# //\r\n\t// #-------------------------------------------------# //\r\n}\r\n\r\nangular.module('super-suit-services').factory('ssCredentialBusinessEngineSvc', ssCredentialBusinessEngineSvc);\r\n","/*@ngInject*/\r\nfunction ssCredentialDataAccessSvc(ssAsync, ssCredentialsApi, ssEmployeeApi, ssActiveUserSvc, ssCredentialBusinessEngineSvc) {\r\n\r\n\tconst { credentialConstants } = ssCredentialBusinessEngineSvc;\r\n\r\n\t// #---------------------------------------------# //\r\n\t// #---- Service (ssCredentialDataAccessSvc) ----# //\r\n\r\n\tfunction _getCredentials(params = {}) {\r\n\t\treturn ssCredentialsApi.queryCredentials(params);\r\n\t}\r\n\r\n\tfunction _getCredentialTypes() {\r\n\t\treturn ssCredentialsApi.queryCredentialTypes();\r\n\t}\r\n\r\n\tfunction _getIssuers(typeId) {\r\n\t\tlet orgId = ssActiveUserSvc.getOrgIdSync();\r\n\t\tlet isOrgSpecific = typeId === credentialConstants.DISTRICT_CUSTOM;\r\n\t\tconst queryParam = { 'sort[name]': 'asc', 'filter[organizationid]': isOrgSpecific ? `${orgId}` : null };\r\n\t\treturn ssCredentialsApi.queryIssuers(queryParam);\r\n\t}\r\n\r\n\tfunction _getIssuersByCredentialType(credentialTypeId, typeId) {\r\n\t\tlet orgId = ssActiveUserSvc.getOrgIdSync();\r\n\t\tlet isOrgSpecific = typeId === credentialConstants.DISTRICT_CUSTOM;\r\n\t\tconst queryParam = { 'filter[credentialtypeid]': `${credentialTypeId}`, 'sort[name]': 'asc', 'filter[organizationid]': isOrgSpecific ? `${orgId}` : null };\r\n\t\treturn ssCredentialsApi.queryIssuers(queryParam);\r\n\t}\r\n\r\n\tfunction _getCredentialsByIssuerId(issuerId) {\r\n\t\tconst queryParam = { 'filter[issuerid]': `${issuerId}`, 'sort[name]': 'asc' };\r\n\t\treturn ssCredentialsApi.queryCredentials(queryParam);\r\n\t}\r\n\r\n\tfunction _getSubjectsByIssuerId(issuerId) {\r\n\t\tconst queryParam = { 'filter[issuerid]': `${issuerId}`, 'sort[name]': 'asc' };\r\n\t\treturn ssCredentialsApi.querySubjects(queryParam);\r\n\t}\r\n\r\n\tfunction _getCredentialsByEmployeeId(id) {\r\n\t\treturn ssCredentialsApi.queryEmployeeCredentials({ employeeId: id });\r\n\t}\r\n\r\n\tfunction _addEmployeeCredential(employee, credentialWithUnderscoreProps) {\r\n\t\tlet credential = transformObject(credentialWithUnderscoreProps);\r\n\t\treturn ssCredentialsApi.addEmployeeCredential({ employeeId: employee.id }, credential);\r\n\t}\r\n\r\n\tfunction _patchEmployeeCredential(employee, credentialWithUnderscoreProps) {\r\n\t\tlet credential = transformObject(credentialWithUnderscoreProps);\r\n\t\treturn ssCredentialsApi.patchEmployeeCredential({ employeeId: employee.id, credentialId: credential.id }, credential);\r\n\t}\r\n\r\n\tfunction _getEmployeeCredentialById(employee, credential) {\r\n\t\treturn ssCredentialsApi.getEmployeeCredential({ employeeId: employee.id, credentialId: credential.id });\r\n\t}\r\n\r\n\tfunction _downloadFile(fileId, employeeId) {\r\n\t\treturn ssEmployeeApi.getFileUrlById({ id: employeeId, fileId: fileId });\r\n\t}\r\n\r\n\tfunction _createFileForOrg(employeeId, filename) {\r\n\t\treturn ssCredentialsApi.addFileRecord({ employeeId }, { filename });\r\n\t}\r\n\r\n\tfunction _uploadFile(employeeId, fileId, file) {\r\n\t\treturn ssCredentialsApi.uploadFileRecord(employeeId, fileId, file);\r\n\t}\r\n\r\n\tfunction _associateFile(employeeId, employeeCredentialId, file) {\r\n\t\treturn ssCredentialsApi.associateFile({ employeeId, credentialId: employeeCredentialId }, file);\r\n\t}\r\n\r\n\tfunction _deleteFile(employeeId, employeeCredentialId, file) {\r\n\t\treturn ssCredentialsApi.deleteFile({ fileId: file.id, employeeId, credentialId: employeeCredentialId });\r\n\t}\r\n\r\n\tfunction transformObject(obj) {\r\n\t\tvar newObj = {};\r\n\t\tObject.keys(obj).forEach((key) => {\r\n\t\t\tif (key.startsWith('_')) {\r\n\t\t\t\tlet newKey = key.substring(1, key.length);\r\n\t\t\t\tnewObj[newKey] = obj[key];\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn newObj;\r\n\t}\r\n\r\n\t// External service API\r\n\treturn {\r\n\t\tgetMany,\r\n\t\tgetById,\r\n\t\tgetCredentialTypes,\r\n\t\tgetIssuers,\r\n\t\tgetIssuerById,\r\n\t\tgetIssuersByCredentialType,\r\n\t\tgetCredentialsByIssuer,\r\n\t\tgetCredentialById,\r\n\t\tgetSubjectsByIssuer,\r\n\t\tgetCredentialsByEmployee,\r\n\t\taddEmployeeCredential,\r\n\t\tpatchEmployeeCredential,\r\n\t\tgetEmployeeCredentialById,\r\n\t\tdownloadFile,\r\n\t\tuploadFile,\r\n\t\tassociateFile,\r\n\t\tdeleteFile,\r\n\t\tdownloadCredentialsCsv,\r\n\t\tdownloadSubjectsCsv,\r\n\t\tdownloadEmployeeCredentialsCsv\r\n\t};\r\n\r\n\t/**\r\n\t * Get a specific Credential by an ID\r\n\t *\r\n\t * @param {any} id The ID of the credential to retrieve\r\n\t * @returns {object} The credential object\r\n\t */\r\n\tfunction getById(id) {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Get all credentials available to the system\r\n\t *\r\n\t * @returns {Array} List of Credential Objects in the system\r\n\t */\r\n\tfunction getMany(params = {}) {\r\n\t\treturn _getCredentials(params);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all credential types system supports\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction getCredentialTypes() {\r\n\t\treturn _getCredentialTypes();\r\n\t}\r\n\r\n\t/**\r\n\t * Get all Issuer Types\r\n\t *\r\n\t * @param {any} typeId\r\n\t * @returns\r\n\t */\r\n\tfunction getIssuers(typeId) {\r\n\t\treturn _getIssuers(typeId);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all Issuer Types given a credential Type\r\n\t *\r\n\t * @param {any} credentialType\r\n\t * @param {any} typeId\r\n\t * @returns\r\n\t */\r\n\tfunction getIssuersByCredentialType(credentialTypeId, typeId) {\r\n\t\tif (credentialTypeId == null) { throw 'Credential type not provided.'; }\r\n\t\treturn _getIssuersByCredentialType(credentialTypeId, typeId);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all certificate by issuer\r\n\t *\r\n\t * @param {int} issuerId The issuer type to lookup all available Credentials\r\n\t * @returns {Array} All Credentials for that issuer type\r\n\t */\r\n\tfunction getCredentialsByIssuer(issuerId) {\r\n\t\tif (!issuerId) { throw 'Issuer Id is not provided.'; }\r\n\t\treturn _getCredentialsByIssuerId(issuerId);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the list of available Subjects based upon the given issuer Id\r\n\t *\r\n\t * @param {any} issuerId\r\n\t * @returns Array of all Subjects for the given Issuer Id\r\n\t */\r\n\tfunction getSubjectsByIssuer(issuerId) {\r\n\t\tif (!issuerId) { throw 'Issuer Id is not provided.'; }\r\n\t\treturn _getSubjectsByIssuerId(issuerId);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all available credentials for a specific employee\r\n\t *\r\n\t * @param {any} employeeId The GUID of an employee to get all credentials\r\n\t * @returns {Array} of all Credentials in the system for that employee\r\n\t */\r\n\tfunction getCredentialsByEmployee(employeeId) {\r\n\t\tif (!employeeId) { throw 'Invalid employeeId. Cannot retrieve credentials.'; }\r\n\t\treturn _getCredentialsByEmployeeId(employeeId);\r\n\t}\r\n\r\n\tfunction addEmployeeCredential(employee, credential) {\r\n\t\tif (!employee) { throw 'Employee is not provided to whom the credential will be created'; }\r\n\t\tif (!credential) { throw 'Credential is not provided to be created'; }\r\n\t\treturn _addEmployeeCredential(employee, credential);\r\n\t}\r\n\r\n\tfunction patchEmployeeCredential(employee, credential) {\r\n\t\tif (!employee) { throw 'Employee is not provided to whom the credential will be created'; }\r\n\t\tif (!credential) { throw 'Credential is not provided to be created'; }\r\n\t\treturn _patchEmployeeCredential(employee, credential);\r\n\t}\r\n\r\n\tfunction getEmployeeCredentialById(employee, credential) {\r\n\t\tif (!employee) { throw 'Employee is not provided to whom the credential will be created'; }\r\n\t\tif (!credential) { throw 'Credential is not provided to be created'; }\r\n\t\treturn _getEmployeeCredentialById(employee, credential);\r\n\t}\r\n\r\n\tfunction downloadFile(fileId, employeeId) {\r\n\t\tif (!fileId) { throw 'File id is not provided'; }\r\n\t\tif (!employeeId) { throw 'Employee id is not provided'; }\r\n\t\treturn _downloadFile(fileId, employeeId);\r\n\t}\r\n\r\n\tfunction uploadFile(employeeId, file) {\r\n\t\tif (!file) { throw 'File is not provided for Upload'; }\r\n\t\tif (!employeeId) { throw 'Employee id is not provided'; }\r\n\t\treturn ssAsync(function*() {\r\n\t\t\ttry {\r\n\t\t\t\tlet orgFile = yield _createFileForOrg(employeeId, file.name);\r\n\t\t\t\tlet uploadedFile = yield _uploadFile(employeeId, orgFile.id, file);\r\n\t\t\t\treturn uploadedFile;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t})();\r\n\t}\r\n\r\n\tfunction associateFile(employeeId, employeeCredentialId, file) {\r\n\t\tif (!file) { throw 'File is not provided for Upload'; }\r\n\t\tif (!employeeId) { throw 'Employee id is not provided'; }\r\n\t\tif (!employeeCredentialId) { throw 'Employee Credential is not provided'; }\r\n\t\treturn _associateFile(employeeId, employeeCredentialId, file);\r\n\t}\r\n\r\n\tfunction deleteFile(employeeId, employeeCredentialId, file) {\r\n\t\tif (!file) { throw 'File is not provided for Upload'; }\r\n\t\tif (!employeeId) { throw 'Employee id is not provided'; }\r\n\t\tif (!employeeCredentialId) { throw 'Employee Credential is not provided'; }\r\n\t\treturn _deleteFile(employeeId, employeeCredentialId, file);\r\n\t}\r\n\r\n\tfunction getIssuerById(issuerId) {\r\n\t\treturn ssCredentialsApi.queryIssuerById(issuerId);\r\n\t}\r\n\r\n\tfunction getCredentialById(credentialId) {\r\n\t\t// OrgId will be sent up with the header.\r\n\t\treturn ssCredentialsApi.queryCredentialById(credentialId);\r\n\t}\r\n\r\n\tfunction downloadSubjectsCsv(issuerId) {\r\n\t\treturn ssCredentialsApi.downloadSubjectsCsv(issuerId);\r\n\t}\r\n\r\n\tfunction downloadCredentialsCsv(issuerId) {\r\n\t\treturn ssCredentialsApi.downloadCredentialsCsv(issuerId);\r\n\t}\r\n\r\n\tfunction downloadEmployeeCredentialsCsv(filter) {\r\n\t\treturn ssCredentialsApi.downloadEmployeeCredentialsReportCsv(filter);\r\n\t}\r\n\r\n\t// #-- END Service (ssCredentialDataAccessSvc) --# //\r\n\t// #---------------------------------------------# //\r\n}\r\n\r\nangular.module('super-suit-services').factory('ssCredentialDataAccessSvc', ssCredentialDataAccessSvc);\r\n","/*@ngInject*/\r\nfunction ssCredentialFactorySvc(ssCredentialBusinessEngineSvc) {\r\n// #------------------------------------------# //\r\n// #---- Service (ssCredentialFactorySvc) ----# //\r\n\r\n\tconst credentialConstants = ssCredentialBusinessEngineSvc.credentialConstants;\r\n\t// External service API\r\n\treturn {\r\n\t\tcreate,\r\n\t\trenew,\r\n\t\tmakeActive\r\n\t};\r\n\r\n\tfunction _create(credential = null, createCopy = false){\r\n\t\treturn {\r\n\t\t\tissuer: (credential) ? credential._credential.issuer : null,\r\n\t\t\tcredential: credential ? credential._credential : null,\r\n\t\t\tcredentialTypeId: (credential) ? credential._credential.credentialTypeId.toString() : null,\r\n\t\t\tverifier: (credential) ? credential._verifier : null,\r\n\t\t\tfiles: (credential && !createCopy) ? [...credential._files] : [],\r\n\t\t\tid: (credential && !createCopy) ? credential.id : null,\r\n\t\t\t_id: (credential && !createCopy) ? credential.id : null,\r\n\t\t\t_credentialId: (credential) ? credential._credential.id : null,\r\n\t\t\t_credentialNumber: (credential) ? credential._credentialNumber : null,\r\n\t\t\t_stateStartedDay: (credential && !createCopy) ? credential._stateStartedDay : '',\r\n\t\t\t_issuedReason: (credential) ? credential._issuedReason : null,\r\n\t\t\t_expirationDay: (credential && !createCopy) ? credential._expirationDay : '',\r\n\t\t\t_isGrantedForLife: (credential) ? credential._isGrantedForLife : false,\r\n\t\t\t_verifiedDay: (credential && credential._verifier) ? credential._verifier.verifiedDay : '',\r\n\t\t\t_subjectIds: (credential) ? credential._subjects.map(subject => subject.id) : []\r\n\t\t};\r\n\t}\r\n\r\n\tfunction create(credential){\r\n\t\treturn _create(credential, false);\r\n\t}\r\n\r\n\tfunction renew(credential){\r\n\t\tlet credentialObj = _create(credential, true);\r\n\t\tcredentialObj._issuedReason = credentialConstants.CREDENTIAL_RENEWED;\r\n\t\treturn credentialObj;\r\n\t}\r\n\r\n\tfunction makeActive(credential){\r\n\t\tlet credentialObj = _create(credential, true);\r\n\t\tcredentialObj._issuedReason = credentialConstants.CREDENTIAL_NEW;\r\n\t\treturn credentialObj;\r\n\t}\r\n\r\n\r\n// #-- END Service (ssCredentialFactorySvc) --# //\r\n// #------------------------------------------# //\r\n}\r\n\r\nangular.module('super-suit-services').factory('ssCredentialFactorySvc', ssCredentialFactorySvc);\r\n","\r\n/**\r\n * ssCredentialViewModelFactorySvc\r\n *\r\n * A factory that creates a viewModel for binding to the Employee Module UI for an employee record\r\n *\r\n * @returns Create()\r\n */\r\nfunction ssCredentialViewModelFactorySvc(ssCredentialBusinessEngineSvc, ssCredentialFactorySvc) {\r\n// #---------------------------------------------------# //\r\n// #---- Service (ssCredentialViewModelFactorySvc) ----# //\r\n\r\n\tconst credentialConstants = ssCredentialBusinessEngineSvc.credentialConstants;\r\n\tvar credentialViewModel = {\r\n\t\tdata: {}, // The JSONApi model representing a credential\r\n\t\tcredentialTypes: [],\r\n\t\tissuers: [],\r\n\t\tcredentials: [],\r\n\t\tsubjects: [],\r\n\t\tdateIssuedLabel: '',\r\n\t\tdateExpirationLabel: '',\r\n\t\tgetDateOptionsForIssueDate: _getDateOptionsForIssueDate,\r\n\t\tgetDateOptionsForExpirationDate: _getDateOptionsForExpirationDate,\r\n\t\tgetCredentialTypesByStateNationalOrCustom: _getCredentialTypesByStateNationalOrCustom,\r\n\t\tgetCredentialLabelsByCredentialType: _getCredentialLabelsByCredentialType,\r\n\t\tgetCredentialIdentifierByCredentialType: _getCredentialIdentifierByCredentialType,\r\n\t\tgetIssueDateLabelsByStatus: _getIssueDateLabelsByStatus,\r\n\t\tgetExpirationDateLabelsByStatus: _getExpirationDateLabelsByStatus,\r\n\t\tgetSubjectAreaLabelByCredentialType: _getSubjectAreaLabelByCredentialType,\r\n\t};\r\n\r\n\t// External service API\r\n\treturn {\r\n\t\tcreate,\r\n\t\trenew,\r\n\t\tmakeActive,\r\n\t\tupdatedCredentialViewModelState\r\n\t};\r\n\r\n\t/**\r\n\t * Sets the maxDate for the Issue Date date picker.\r\n\t * @param {String} d\r\n\t */\r\n\tfunction _getDateOptionsForIssueDate(d) {\r\n\t\tif (d == null || d.length === 0) {\r\n\t\t\t// including maxDate since the super-input-datepicker won't reset the options unless it's included\r\n\t\t\treturn { maxDate: '' };\r\n\t\t}\r\n\t\treturn { maxDate: new Date(d) };\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the maxDate for the Expiration Date date picker.\r\n\t * @param {String} d\r\n\t */\r\n\tfunction _getDateOptionsForExpirationDate(d) {\r\n\t\tif (d == null || d.length === 0) {\r\n\t\t\t// including minDate since the super-input-datepicker won't reset the options unless it's included\r\n\t\t\treturn { minDate: '' };\r\n\t\t}\r\n\t\treturn { minDate: new Date(d) };\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have labels for the dates\r\n\t *\r\n\t * @param {object} credential Credential object that needs to be copied.\r\n\t * @param {object} object object that needs to be applied on the copy.\r\n\t * @returns\r\n\t */\r\n\tfunction updatedCredentialViewModelState(credential, object){\r\n\t\treturn Object.assign({}, credential, object);\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have labels for the dates\r\n\t *\r\n\t * @param {id} credentialStatus Credential Status e.g. Active, Not Active or In Progress.\r\n\t * @returns\r\n\t */\r\n\tfunction _getIssueDateLabelsByStatus(credentialStatus, isRenewal = false){\r\n\t\tif(credentialStatus === credentialConstants.CREDENTIAL_INPROGRESS) {\r\n\t\t\treturn 'Program Started';\r\n\t\t}else{\r\n\t\t\tlet label = isRenewal ? 'Renewed' : 'Issued';\r\n\t\t\treturn `Date ${label}`;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have labels for the dates\r\n\t *\r\n\t * @param {id} credentialStatus Credential Status e.g. Active, Not Active or In Progress.\r\n\t * @returns\r\n\t */\r\n\tfunction _getExpirationDateLabelsByStatus(credentialStatus){\r\n\t\tif(credentialStatus === credentialConstants.CREDENTIAL_INPROGRESS) {\r\n\t\t\treturn 'Tentative Completion';\r\n\t\t}else{\r\n\t\t\treturn 'Expiration';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have credential labels properties on it\r\n\t *\r\n\t * @param {array} credentialType Credential type e.g. Certificate / License, Clearances, Driver's License etc\r\n\t * @returns\r\n\t */\r\n\tfunction _getCredentialLabelsByCredentialType(credentialType) {\r\n\t\tif(credentialType === credentialConstants.CERTIFICATE_LICENSE){\r\n\t\t\treturn 'Certificate / License';\r\n\t\t}else if(credentialType === credentialConstants.CLEARANCES){\r\n\t\t\treturn 'Clearances';\r\n\t\t}else if(credentialType === credentialConstants.DRIVER_LICENSE) {\r\n\t\t\treturn 'Driver License';\r\n\t\t}else{\r\n\t\t\treturn 'Certificate';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have credential labels properties on it\r\n\t *\r\n\t * @param {array} credentialType Credential type e.g. Certificate / License, Clearances, Driver's License etc\r\n\t * @returns\r\n\t */\r\n\tfunction _getCredentialIdentifierByCredentialType(credentialType) {\r\n\t\tif(credentialType === credentialConstants.CERTIFICATE_LICENSE){\r\n\t\t\treturn 'Certification Number';\r\n\t\t}else if(credentialType === credentialConstants.CLEARANCES){\r\n\t\t\treturn 'Document Number';\r\n\t\t}else if(credentialType === credentialConstants.DRIVER_LICENSE) {\r\n\t\t\treturn 'Driver License Number';\r\n\t\t}else{\r\n\t\t\treturn 'Certification Number';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an object that have credential labels properties on it\r\n\t *\r\n\t * @param {array} credentialType Credential type e.g. Certificate / License, Clearances, Driver's License etc\r\n\t * @returns\r\n\t */\r\n\tfunction _getSubjectAreaLabelByCredentialType(credentialType) {\r\n\t\tif (credentialType === credentialConstants.CLEARANCES) {\r\n\t\t\treturn 'Additional Information';\r\n\t\t}\r\n\t\treturn 'Subject Areas';\r\n\t}\r\n\r\n\t/**\r\n\t * Create credential types with isDisabled property on it.\r\n\t *\r\n\t * @param {number} typeId Type id whether it is State&National or Custom\r\n\t * @param {array} credentialTypes All credential types from the server.\r\n\t * @returns\r\n\t */\r\n\tfunction _getCredentialTypesByStateNationalOrCustom(typeId, credentialTypes){\r\n\t\tlet ret = {};\r\n\t\tret.credentialTypes = credentialTypes.map(t => {\r\n\t\t\tif(typeId === credentialConstants.STATE_NATIONAL){\r\n\t\t\t\treturn Object.assign({}, t, { isDisabled: t.id === credentialConstants.OTHERS });\r\n\t\t\t}else{\r\n\t\t\t\treturn Object.assign({}, t, { isDisabled: t.id !== credentialConstants.OTHERS });\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create a new bindable view model for use on an employee record\r\n\t *\r\n\t * @param {any} credential Credential Object: create from JSONApi Object\r\n\t * Credential Type: create from credential type (certificate, drivers license)\r\n\t * @returns {object} bindable credential view model for use in the employee module\r\n\t */\r\n\tfunction create(credential) {\r\n\t\tlet ret = Object.assign({}, credentialViewModel); //Define ViewModel Properties\r\n\t\tret.data = (credential.id) ? ssCredentialFactorySvc.create(credential) : credential;\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tfunction renew(credential){\r\n\t\tlet ret = Object.assign({}, credentialViewModel); //Define ViewModel Properties\r\n\t\tret.data = ssCredentialFactorySvc.renew(credential);\r\n\r\n\t\tret.data.verifier = null; // renewals can never have a verifier\r\n\t\tret.data._verifier = null; // renewals can never have a verifier\r\n\t\tret.data._verifiedDay = null; // renewals can never have a verifier\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tfunction makeActive(credential){\r\n\t\tlet ret = Object.assign({}, credentialViewModel); //Define ViewModel Properties\r\n\t\tret.data = ssCredentialFactorySvc.makeActive(credential);\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n// #-- END Service (ssCredentialViewModelFactorySvc) --# //\r\n// #---------------------------------------------------# //\r\n}\r\n\r\nangular.module('super-suit-services').factory('ssCredentialViewModelFactorySvc', ssCredentialViewModelFactorySvc);\r\n"],"names":["ssCredentialBusinessEngineSvc","moment","_throwIfNotValidIssuedReason","credential","_issuedReason","TypeError","includes","Error","_credentialIsActive","asOf","_expirationDay","isSameOrAfter","isExpirationInFuture","_credentialIsNotActive","_stateStartedDay","isValid","isBefore","_credentialIsInProgress","ALL_CONSTANTS","ALL_POSSIBLE_CREDENTIAL_STATUS","value","label","isAfter","find","s","expirationDate","diff","object","Object","assign","credentialStatus","isRenewal","IN_PROGRESS","ACTIVE","NOT_ACTIVE","CREDENTIAL_IN_PROGRESS","CREDENTIAL_RENEWED","CREDENTIAL_NEW","loggedInUserKey","_id","verifier","employeeId","credentialList","_sortByDates","a","b","Date","fullList","slice","sort","reduce","acc","item","trackerId","_credential","id","_subjects","length","map","join","tracker","recent","push","archive","_createdUtc","ssCredentialDataAccessSvc","ssAsync","ssCredentialsApi","ssEmployeeApi","ssActiveUserSvc","_getCredentials","params","queryCredentials","_getCredentialTypes","queryCredentialTypes","_getIssuers","typeId","orgId","getOrgIdSync","isOrgSpecific","credentialConstants","DISTRICT_CUSTOM","queryParam","queryIssuers","_getIssuersByCredentialType","credentialTypeId","_getCredentialsByIssuerId","issuerId","_getSubjectsByIssuerId","querySubjects","_getCredentialsByEmployeeId","queryEmployeeCredentials","_addEmployeeCredential","employee","credentialWithUnderscoreProps","transformObject","addEmployeeCredential","_patchEmployeeCredential","patchEmployeeCredential","credentialId","_getEmployeeCredentialById","getEmployeeCredential","_downloadFile","fileId","getFileUrlById","_createFileForOrg","filename","addFileRecord","_uploadFile","file","uploadFileRecord","_associateFile","employeeCredentialId","associateFile","_deleteFile","deleteFile","obj","newObj","keys","forEach","key","startsWith","newKey","substring","queryIssuerById","queryCredentialById","name","orgFile","uploadedFile","downloadCredentialsCsv","downloadSubjectsCsv","filter","downloadEmployeeCredentialsReportCsv","ssCredentialFactorySvc","_create","createCopy","issuer","toString","_verifier","_files","_credentialNumber","_isGrantedForLife","verifiedDay","subject","credentialObj","ssCredentialViewModelFactorySvc","credentialViewModel","d","maxDate","minDate","credentialTypes","ret","STATE_NATIONAL","t","isDisabled","OTHERS","credentialType","CERTIFICATE_LICENSE","CLEARANCES","DRIVER_LICENSE","CREDENTIAL_INPROGRESS","data","create","renew","_verifiedDay","makeActive","angular","module","factory"],"mappings":"yBAAA,aACA,QAASA,EAAT,CAAuCC,CAAvC,CAA+C;;;;;;;;;;;aAyJrCC,GAA6BC,EAAY,IAC7C,CAACA,EAAWC,mBACT,IAAIC,UAAJ,CAAc,sCAAd,KAEH,CAAC,mCAA6DC,QAA7D,CAAsEH,EAAWC,aAAjF,OACE,IAAIG,MAAJ,8FAAuGJ,EAAWC,aAAlH;;;;;;;;;;aAICI,GAAoBL,EAAYM,EAAM,IAC1C,CAACA,OAAc;KAEUN,GACzB,CAAC,sBAAqCG,QAArC,CAA8CH,EAAWC,aAAzD,cACD,CAACD,EAAWO,oBACT,IAAIL,UAAJ,CAAc,uCAAd,mBAIyB,OACxBJ,GAAOE,EAAWO,cAAlBT,EAAkCU,aAAlCV,CAAgDQ,CAAhDR,EAHDW,WAOCC,GAAuBV,EAAYM,EAAM,IAC7C,CAACN,EAAWW,sBAA0B,IAAIT,UAAJ,CAAc,yCAAd,KACtC,CAACF,EAAWO,oBAAwB,IAAIL,UAAJ,CAAc,uCAAd,QAChCJ,GAAOE,EAAWW,gBAAlBb,EAAoCc,OAApCd,IAAiDA,EAAOE,EAAWO,cAAlBT,EAAkCc,OAAlCd,EAAjDA,EACPA,EAAOE,EAAWO,cAAlBT,EAAkCe,QAAlCf,CAA2CQ,CAA3CR,UAGOgB,GAAwBd,EAAY,IACxC,CAACA,EAAWW,sBAA0B,IAAIT,UAAJ,CAAc,yCAAd,WACbF,GACtBA,iBAAWC;;;;AA3L2B,GAiBxCc,GAAgB,gBAAA,uBAAA,yBAAA,yBAAA,6BAAA,mCAAA;mCAAA;uBAAA,eAAA,mBAAA,WAAA,mBAAA,oBAAA,CAjBwB,CAgCxCC,EAAiC,CACtC,CAAEC,cAAF,CAAiBC,MAAO,QAAxB,CADsC,CAEtC,CAAED,iBAAF,CAAqBC,MAAO,sBAA5B,CAFsC,CAGtC,CAAED,kBAAF,CAAsBC,MAAO,gDAA7B,CAHsC,CAhCO;MAuCvC,qBACeH,CADf,uBAEiBC,CAFjB,8BAsEsBhB,EAAYM,EAAM,IAC1C,CAACA,OAAc,IAAIF,MAAJ,CAAU,mCAAV,KACf,CAACJ,OAAoB,IAAII,MAAJ,CAAU,2DAAV,OACIJ,GACzBA,EAAWW,gBAAXX,EAA+B,CAACA,EAAWC,mBAAuB,IAAIG,MAAJ,CAAU,kEAAV,KAClEN,EAAOE,EAAWW,gBAAlBb,EAAoCqB,OAApCrB,CAA4CA,EAAOE,EAAWO,cAAlBT,CAA5CA,OAAwF,IAAIM,MAAJ,CAAU,yDAAV,KAExFC,EAAoBL,CAApBK,CAAgCC,CAAhCD,QAAgDW,GAA+BI,IAA/BJ,CAAoC,UAAA,QAAKK,aAAEJ,KAA3C,CAAAD,KAEhDN,EAAuBV,CAAvBU,CAAmCJ,CAAnCI,QAAmDM,GAA+BI,IAA/BJ,CAAoC,UAAA,QAAKK,gBAAEJ,KAA3C,CAAAD,KAEnDF,EAAwBd,CAAxBc,QAA8CE,GAA+BI,IAA/BJ,CAAoC,UAAA,QAAKK,iBAAEJ,KAA3C,CAAAD,OAE5C,IAAIZ,MAAJ,CAAU,sDAAV,EAnFA,qBA4FaJ,EAAYM,EAAM,IACjC,CAACA,OAAc,uCACfD,EAAoBL,CAApBK,CAAgCC,CAAhCD,EAAuC,IACtCiB,GAAiBxB,EAAOE,EAAWO,cAAlBT,QACdwB,OAAeC,IAAfD,CAAoBhB,CAApBgB,CAA0B,MAA1BA,WAhGF,oBA2GYtB,EAAYM,EAAM,IAChC,CAACA,OAAc,uCACfgB,GAAiBxB,EAAOE,EAAWO,cAAlBT,QACdQ,GAAKa,OAALb,CAAagB,CAAbhB,EA9GD,iCA4DyBN,EAAYwB,EAAQ,OAC5CC,QAAOC,MAAPD,CAAc,EAAdA,CAAkBzB,CAAlByB,CAA8BD,CAA9BC,EA7DD,yCAyCiCE,EAAqC,IAAnBC,+CAAAA,mBACrDD,IAAqBZ,EAAcc,WAAnCF,EAAkDC,OAAmB,+DACrE,CAAC,CAACb,EAAce,MAAf,CAAuBf,EAAcgB,UAArC,CAAiDhB,EAAcc,WAA/D,EAA4E1B,QAA5E,CAAqFwB,CAArF,OAAgH,4BAFzC,MAGxEA,KAAqBZ,EAAcc,WAHqC,CAIpEd,EAAciB,sBAJsD,CAMxEJ,CANwE,CAOpEb,EAAckB,kBAPsD,CASrElB,EAAcmB,eAlDf,0BAoCkBlC,EAAYmC,EAAiB,SAC/B,IAAlBnC,IAAWoC,GADsC,GAE7CpC,EAAWqC,QAAXrC,EAAuBA,EAAWqC,QAAXrC,CAAoBsC,UAApBtC,GAAmCmC,CAFb;CApC/C,+BAYuBI,EAAgB,IACvCC,GAAe,SAACC,CAAD,CAAIC,CAAJ,QAAU,IAAIC,KAAJ,CAASD,CAAT,EAAc,GAAIC,KAAJ,CAASF,CAAT,CAA7C,CAD6C,CAEvCG,EAAWL,EAAeM,KAAfN,GAAuBO,IAAvBP,CAA4B,SAACE,CAAD,CAAIC,CAAJ,QAAUF,GAAaC,EAAE9B,gBAAf6B,CAAiCE,EAAE/B,gBAAnC6B,CAAtC,CAAAD,CAF4B,GAGjBK,EAASG,MAATH,CAAgB,SAACI,CAAD,CAAMC,CAAN,CAAe,IACtDC,GAAYD,EAAKE,WAALF,CAAiBG,SAE7BH,GAAKI,SAALJ,EAAkBA,EAAKI,SAALJ,CAAeK,WACrBJ,KAAAA,CAAaD,EAAKI,SAALJ,CAAeM,GAAfN,CAAmB,UAAA,QAAK5B,GAAE+B,EAA1B,CAAAH,EAA8BH,IAA9BG,GAAqCO,IAArCP,CAA0C,GAA1CA,GAGC,IAA1BD,IAAIS,OAAJT,CAAYE,CAAZF,KACCS,QAAQP,QACRQ,OAAOC,KAAKV,MAEZW,QAAQD,KAAKV,GAEXD,CAboB,CAAAJ,CAczB,CAAEa,QAAS,EAAX,CAAeC,OAAQ,EAAvB,CAA2BE,QAAS,EAApC,CAdyBhB,CAHiB,CAGrCc,IAAAA,MAHqC,CAG7BE,IAAAA,OAH6B,OAkBtC,QACEF,EAAOZ,IAAPY,CAAY,SAACjB,CAAD,CAAIC,CAAJ,QAAUF,GAAaC,EAAEoB,WAAfrB,CAA4BE,EAAEmB,WAA9BrB,CAAtB,CAAAkB,CADF,SAEGE,EAAQd,IAARc,CAAa,SAACnB,CAAD,CAAIC,CAAJ,QAAUF,GAAaC,EAAEoB,WAAfrB,CAA4BE,EAAEmB,WAA9BrB,CAAvB,CAAAoB,CAFH,EA9BD,ECxCR,aACA,QAASE,EAAT,CAAmCC,CAAnC,CAA4CC,CAA5C,CAA8DC,CAA9D,CAA6EC,CAA7E,CAA8FrE,CAA9F,CAA6H;;QAOnHsE,IAA6B,IAAbC,0DAAS,SAC1BJ,GAAiBK,gBAAjBL,CAAkCI,CAAlCJ,UAGCM,IAAsB,OACvBN,GAAiBO,oBAAjBP,WAGCQ,GAAYC,EAAQ,IACxBC,GAAQR,EAAgBS,YAAhBT,EADgB,CAExBU,EAAgBH,IAAWI,EAAoBC,eAFvB,CAGtBC,EAAa,CAAE,aAAc,KAAhB,CAAuB,yBAA0BH,KAAmBF,CAAnBE,CAA6B,IAA9E,CAHS,OAIrBZ,GAAiBgB,YAAjBhB,CAA8Be,CAA9Bf,UAGCiB,GAA4BC,EAAkBT,EAAQ,IAC1DC,GAAQR,EAAgBS,YAAhBT,EADkD,CAE1DU,EAAgBH,IAAWI,EAAoBC,eAFW,CAGxDC,EAAa,CAAE,8BAA+BG,CAAjC,CAAqD,aAAc,KAAnE,CAA0E,yBAA0BN,KAAmBF,CAAnBE,CAA6B,IAAjI,CAH2C,OAIvDZ,GAAiBgB,YAAjBhB,CAA8Be,CAA9Bf,UAGCmB,GAA0BC,EAAU,OAErCpB,GAAiBK,gBAAjBL,CADY,CAAE,sBAAuBoB,CAAzB,CAAqC,aAAc,KAAnD,CACZpB,UAGCqB,GAAuBD,EAAU,OAElCpB,GAAiBsB,aAAjBtB,CADY,CAAE,sBAAuBoB,CAAzB,CAAqC,aAAc,KAAnD,CACZpB,UAGCuB,GAA4BnC,EAAI,OACjCY,GAAiBwB,wBAAjBxB,CAA0C,CAAE1B,WAAYc,CAAd,CAA1CY,UAGCyB,GAAuBC,EAAUC,EAA+B,IACpE3F,GAAa4F,EAAgBD,CAAhBC,QACV5B,GAAiB6B,qBAAjB7B,CAAuC,CAAE1B,WAAYoD,EAAStC,EAAvB,CAAvCY,CAAoEhE,CAApEgE,UAGC8B,GAAyBJ,EAAUC,EAA+B,IACtE3F,GAAa4F,EAAgBD,CAAhBC,QACV5B,GAAiB+B,uBAAjB/B,CAAyC,CAAE1B,WAAYoD,EAAStC,EAAvB,CAA2B4C,aAAchG,EAAWoD,EAApD,CAAzCY,CAAmGhE,CAAnGgE,UAGCiC,GAA2BP,EAAU1F,EAAY,OAClDgE,GAAiBkC,qBAAjBlC,CAAuC,CAAE1B,WAAYoD,EAAStC,EAAvB,CAA2B4C,aAAchG,EAAWoD,EAApD,CAAvCY,UAGCmC,GAAcC,EAAQ9D,EAAY,OACnC2B,GAAcoC,cAAdpC,CAA6B,CAAEb,GAAId,CAAN,CAAkB8D,OAAQA,CAA1B,CAA7BnC,UAGCqC,GAAkBhE,EAAYiE,EAAU,OACzCvC,GAAiBwC,aAAjBxC,CAA+B,CAAE1B,YAAF,CAA/B0B,CAA+C,CAAEuC,UAAF,CAA/CvC,UAGCyC,GAAYnE,EAAY8D,EAAQM,EAAM,OACvC1C,GAAiB2C,gBAAjB3C,CAAkC1B,CAAlC0B,CAA8CoC,CAA9CpC,CAAsD0C,CAAtD1C,UAGC4C,GAAetE,EAAYuE,EAAsBH,EAAM,OACxD1C,GAAiB8C,aAAjB9C,CAA+B,CAAE1B,YAAF,CAAc0D,aAAca,CAA5B,CAA/B7C,CAAmF0C,CAAnF1C,UAGC+C,GAAYzE,EAAYuE,EAAsBH,EAAM,OACrD1C,GAAiBgD,UAAjBhD,CAA4B,CAAEoC,OAAQM,EAAKtD,EAAf,CAAmBd,YAAnB,CAA+B0D,aAAca,CAA7C,CAA5B7C,UAGC4B,GAAgBqB,EAAK,IACzBC,GAAS,iBACNC,KAAKF,GAAKG,QAAQ,SAACC,CAAD,CAAS,IAC7BA,EAAIC,UAAJD,CAAe,GAAfA,EAAqB,IACpBE,GAASF,EAAIG,SAAJH,CAAc,CAAdA,CAAiBA,EAAI/D,MAArB+D,IACNE,GAAUN,EAAII,CAAJJ,EAHnB,GAMOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAnFArC,GAAwBhF,EAAxBgF,0BAuFD,mBAsCuB,IAAbT,0DAAS,SAClBD,GAAgBC,CAAhBD,EAvCD,mBA6Bc,OACb,GA9BD,8BA8CuB,OACtBG,KA/CD,qBAwDaG,EAAQ,OACpBD,GAAYC,CAAZD,EAzDD,wBA6JgBY,EAAU,OACzBpB,GAAiByD,eAAjBzD,CAAiCoB,CAAjCpB,EA9JD,qCAmE6BkB,EAAkBT,EAAQ,IACrC,IAApBS,SAAkC,sCAC/BD,GAA4BC,CAA5BD,CAA8CR,CAA9CQ,EArED,iCA8EyBG,EAAU,IACrC,CAACA,OAAkB,mCAChBD,GAA0BC,CAA1BD,EAhFD,4BAiKoBa,EAAc;MAEjChC,GAAiB0D,mBAAjB1D,CAAqCgC,CAArChC,EAnKD,8BAyFsBoB,EAAU,IAClC,CAACA,OAAkB,mCAChBC,GAAuBD,CAAvBC,EA3FD,mCAoG2B/C,EAAY,IACzC,CAACA,OAAoB,yDAClBiD,GAA4BjD,CAA5BiD,EAtGD,gCAyGwBG,EAAU1F,EAAY,IAChD,CAAC0F,OAAkB,qEACnB,CAAC1F,OAAoB,iDAClByF,GAAuBC,CAAvBD,CAAiCzF,CAAjCyF,EA5GD,kCA+G0BC,EAAU1F,EAAY,IAClD,CAAC0F,OAAkB,qEACnB,CAAC1F,OAAoB,iDAClB8F,GAAyBJ,CAAzBI,CAAmC9F,CAAnC8F,EAlHD,oCAqH4BJ,EAAU1F,EAAY,IACpD,CAAC0F,OAAkB,qEACnB,CAAC1F,OAAoB,iDAClBiG,GAA2BP,CAA3BO,CAAqCjG,CAArCiG,EAxHD,uBA2HeG,EAAQ9D,EAAY,IACrC,CAAC8D,OAAgB,6BACjB,CAAC9D,OAAoB,oCAClB6D,GAAcC,CAAdD,CAAsB7D,CAAtB6D,EA9HD,qBAiIa7D,EAAYoE,EAAM,IACjC,CAACA,OAAc,qCACf,CAACpE,OAAoB,oCAClByB,wCAAQ,UAAA,mHAEOuC,EAAkBhE,CAAlBgE,CAA8BI,EAAKiB,IAAnCrB,kCACKG,EAAYnE,CAAZmE,CAAwBmB,EAAQxE,EAAhCqD,CAAoCC,CAApCD,2CAClBoB,8CAED,GAAIzH,MAAJ,KAAA,uDAND,EAAA2D,IApID,wBA+IgBzB,EAAYuE,EAAsBH,EAAM,IAC1D,CAACA,OAAc,qCACf,CAACpE,OAAoB,iCACrB,CAACuE,OAA8B,4CAC5BD,GAAetE,CAAfsE,CAA2BC,CAA3BD,CAAiDF,CAAjDE,EAnJD,qBAsJatE,EAAYuE,EAAsBH,EAAM,IACvD,CAACA,OAAc,qCACf,CAACpE,OAAoB,iCACrB,CAACuE,OAA8B,4CAC5BE,GAAYzE,CAAZyE,CAAwBF,CAAxBE,CAA8CL,CAA9CK,EA1JD,iCA0KyB3B,EAAU,OAClCpB,GAAiB8D,sBAAjB9D,CAAwCoB,CAAxCpB,EA3KD,8BAsKsBoB,EAAU,OAC/BpB,GAAiB+D,mBAAjB/D,CAAqCoB,CAArCpB,EAvKD,yCA8KiCgE,EAAQ,OACxChE,GAAiBiE,oCAAjBjE,CAAsDgE,CAAtDhE,EA/KD,EC1FR,aACA,QAASkE,EAAT,CAAgCrI,CAAhC,CAA+D,SAYrDsI,IAA8C,IAAtCnI,0DAAa,IAAyB,CAAnBoI,8CAAAA,eAAmB,OAC/C,QACGpI,EAAcA,EAAWmD,WAAXnD,CAAuBqI,MAArCrI,CAA8C,IADjD,YAEMA,EAAaA,EAAWmD,WAAxBnD,CAAsC,IAF5C,kBAGaA,EAAcA,EAAWmD,WAAXnD,CAAuBkF,gBAAvBlF,CAAwCsI,QAAxCtI,EAAdA,CAAmE,IAHhF,UAIKA,EAAcA,EAAWuI,SAAzBvI,CAAqC,IAJ1C,OAKEA,GAAc,CAACoI,CAAfpI,aAAiCA,EAAWwI,QAA5CxI,CAAsD,EALxD,IAMDA,GAAc,CAACoI,CAAfpI,CAA6BA,EAAWoD,EAAxCpD,CAA6C,IAN5C,KAOAA,GAAc,CAACoI,CAAfpI,CAA6BA,EAAWoD,EAAxCpD,CAA6C,IAP7C,eAQUA,EAAcA,EAAWmD,WAAXnD,CAAuBoD,EAArCpD,CAA0C,IARpD,mBAScA,EAAcA,EAAWyI,iBAAzBzI,CAA6C,IAT3D,kBAUaA,GAAc,CAACoI,CAAfpI,CAA6BA,EAAWW,gBAAxCX,CAA2D,EAVxE,eAWUA,EAAcA,EAAWC,aAAzBD,CAAyC,IAXnD,gBAYWA,GAAc,CAACoI,CAAfpI,CAA6BA,EAAWO,cAAxCP,CAAyD,EAZpE,qBAacA,GAAcA,EAAW0I,iBAbvC,cAcS1I,GAAcA,EAAWuI,SAAzBvI,CAAsCA,EAAWuI,SAAXvI,CAAqB2I,WAA3D3I,CAAyE,EAdlF,aAeQA,EAAcA,EAAWqD,SAAXrD,CAAqBuD,GAArBvD,CAAyB,UAAA,QAAW4I,GAAQxF,EAA5C,CAAApD,CAAdA,CAAgE,EAfxE;;;;GATF6E,GAAsBhF,EAA8BgF;MAEnD,iBA0BS7E,EAAW,OACnBmI,GAAQnI,CAARmI,KA3BD,gBA8BQnI,EAAW,IACrB6I,GAAgBV,EAAQnI,CAARmI,cACNlI,cAAgB4E,EAAoB5C,mBAC3C4G,EAjCD,qBAoCa7I,EAAW,IAC1B6I,GAAgBV,EAAQnI,CAARmI,cACNlI,cAAgB4E,EAAoB3C,eAC3C2G,EAvCD,ECNR;;;;;;IAOA,QAASC,EAAT,CAAyCjJ,CAAzC,CAAwEqI,CAAxE,CAAgG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAA,GAIzFrD,GAAsBhF,EAA8BgF,mBAJqC,CAK3FkE,EAAsB,MACnB,EADmB;gBAER,EAFQ,SAGhB,EAHgB,aAIZ,EAJY,UAKf,EALe,iBAMR,EANQ,qBAOJ,EAPI,qCA8BWC,EAAG,OAC9B,KAALA,KAA0B,CAAbA,KAAE1F,MADoB,CAG/B,CAAE2F,QAAS,EAAX,CAH+B,CAKhC,CAAEA,QAAS,GAAItG,KAAJ,CAASqG,CAAT,CAAX;;;KAnCkB,0CA0CgBA,EAAG,OACnC,KAALA,KAA0B,CAAbA,KAAE1F,MADyB,CAGpC,CAAE4F,QAAS,EAAX,CAHoC,CAKrC,CAAEA,QAAS,GAAIvG,KAAJ,CAASqG,CAAT,CAAX,EA/CkB,oDAkJ0BvE,EAAQ0E,EAAgB,IACvEC,GAAM,CACND,eADM,CACYA,EAAgB5F,GAAhB4F,CAAoB,UAAA,CAAK,OAC3C1E,KAAWI,EAAoBwE,cADY,CAEtC5H,OAAOC,MAAPD,CAAc,EAAdA,CAAkB6H,CAAlB7H,CAAqB,CAAE8H,WAAYD,EAAElG,EAAFkG,GAASzE,EAAoB2E,MAA3C,CAArB/H,CAFsC,CAItCA,OAAOC,MAAPD,CAAc,EAAdA,CAAkB6H,CAAlB7H,CAAqB,CAAE8H,WAAYD,EAAElG,EAAFkG,GAASzE,EAAoB2E,MAA3C,CAArB/H,CAJa,CAAA0H,CADZ,QAQHC;;;;;;;;;;;;;;;;;;;;;KA3JkB,8CAgGoBK,EAAgB,OAC1DA,KAAmB5E,EAAoB6E,mBADmB,CAErD,uBAFqD,CAGpDD,IAAmB5E,EAAoB8E,UAHa,CAIrD,YAJqD,CAKpDF,IAAmB5E,EAAoB+E,cALa,CAMrD,gBANqD,CAQrD,cAxGiB,kDAkHwBH,EAAgB,OAC9DA,KAAmB5E,EAAoB6E,mBADuB,CAEzD,sBAFyD,CAGxDD,IAAmB5E,EAAoB8E,UAHiB,CAIzD,iBAJyD,CAKxDF,IAAmB5E,EAAoB+E,cALiB,CAMzD,uBANyD,CAQzD,uBA1HiB,qCAmEWjI,EAAoC,IAAlBC,+CAAAA,mBACnDD,IAAqBkD,EAAoBgF,4BACpC,qBAEH3I,GAAQU,EAAY,SAAZA,CAAwB,uBACrBV,EAxES,0CAkFgBS,EAAiB,OACvDA,KAAqBkD,EAAoBgF,qBADc,CAElD,sBAFkD,CAIlD,aAtFiB,8CAoIoBJ,EAAgB,OACzDA,KAAmB5E,EAAoB8E,UADkB,CAErD,wBAFqD,CAItD,gBAxIkB,CALqE;MAwBxF,iBAmJS3J,EAAY,IACvBoJ,GAAM3H,OAAOC,MAAPD,CAAc,EAAdA,CAAkBsH,CAAlBtH;SACNqI,KAAQ9J,EAAWoD,EAAXpD,CAAiBkI,EAAuB6B,MAAvB7B,CAA8BlI,CAA9BkI,CAAjBlI,CAA6DA,EAClEoJ,EAtJD,gBAyJQpJ,EAAW,IACrBoJ,GAAM3H,OAAOC,MAAPD,CAAc,EAAdA,CAAkBsH,CAAlBtH;;SACNqI,KAAO5B,EAAuB8B,KAAvB9B,CAA6BlI,CAA7BkI,IAEP4B,KAAKzH,SAAW,OAChByH,KAAKvB,UAAY,OACjBuB,KAAKG,aAAe,KACjBb,EAhKD,qBAmKapJ,EAAW,IAC1BoJ,GAAM3H,OAAOC,MAAPD,CAAc,EAAdA,CAAkBsH,CAAlBtH;SACNqI,KAAO5B,EAAuBgC,UAAvBhC,CAAkClI,CAAlCkI,EACJkB,EAtKD,0CAsCkCpJ,EAAYwB,EAAO,OACpDC,QAAOC,MAAPD,CAAc,EAAdA,CAAkBzB,CAAlByB,CAA8BD,CAA9BC,EAvCD,uBHqKR0I,QAAQC,MAARD,CAAe,qBAAfA,EAAsCE,OAAtCF,CAA8C,+BAA9CA,CAA+EtK,CAA/EsK,6GC2EAA,QAAQC,MAARD,CAAe,qBAAfA,EAAsCE,OAAtCF,CAA8C,2BAA9CA,CAA2ErG,CAA3EqG,2KC1NAA,QAAQC,MAARD,CAAe,qBAAfA,EAAsCE,OAAtCF,CAA8C,wBAA9CA,CAAwEjC,CAAxEiC,uECwJAA,QAAQC,MAARD,CAAe,qBAAfA,EAAsCE,OAAtCF,CAA8C,iCAA9CA,CAAiFrB,CAAjFqB"}