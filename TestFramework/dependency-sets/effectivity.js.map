{"version":3,"file":"effectivity.js","sources":["../../dependency-sets/effectivity/helpers/ssDateByOrgHlp/date-by-org.js"],"sourcesContent":["// #---------------------------------# //\r\n// #---- Helper (ssDateByOrgHlp) ----# //\r\n\r\n/*@ngInject*/\r\nfunction ssDateByOrgHlp(moment, $log) {\r\n\r\n\t// ##############################\r\n\t// TIP: If you have questions about the behavior of these functions, please consult the associated unit tests for thorough examples\r\n\t// ##############################\r\n\r\n\t//#region -- The Reveal\r\n\treturn {\r\n\t\ttodaysStartRelativeTo,\r\n\t\ttodaysEndRelativeTo,\r\n\t\tstartOfDayRelativeTo,\r\n\t\tendOfDayRelativeTo,\r\n\t\tutcIsoToRelativeMoment,\r\n\t\tisCurrent,\r\n\t\tisInPast,\r\n\t\tisInFuture,\r\n\t\tsafeAsOfDateRelativeTo,\r\n\t\tsafeNowRelativeTo\r\n\t};\r\n\t//#endregion -- The Reveal\r\n\r\n\t//#region -- methods for translating from the server\r\n\t/**\r\n\t * Creates a Moment object that can format/present the time in a way that will look correct to the users of the provided org\r\n\t * @param {String} serverTimeStr a date time string expressed in ISO format\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @returns {Moment} the Moment object that is aware of the requested timezone\r\n\t */\r\n\tfunction utcIsoToRelativeMoment(serverTimeStr, org) {\r\n\t\t_throwIfNotUtcIsoFormat(serverTimeStr, 'serverTimeStr');\r\n\t\tconst serverTimeAsMoment = moment(serverTimeStr);\r\n\t\tif (!org._ianaTimeZone) { throw Error('Organization does not have the TIME ZONE specified.'); }\r\n\t\t_throwIfNotValidMoment(serverTimeAsMoment, 'serverTimeStr');\r\n\t\tconst timezone = org._ianaTimeZone;\r\n\t\treturn serverTimeAsMoment.tz(timezone);\r\n\t}\r\n\t//#endregion -- methods for translating from the server\r\n\r\n\t//#region -- methods for converting objects that are based on DATE RANGES\r\n\t/**\r\n\t * Create an ISO string for the time in which the organization's current day starts\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @param {Boolean} asServerString if true then the result will be an ISO string, if false the result will be a Moment object\r\n\t * @returns {String | Moment} the requested ISO string (that the server wants), or (if you request it via asServerString) a moment object for the calculated time\r\n\t */\r\n\tfunction todaysStartRelativeTo(org, asServerString = false) {\r\n\t\t_warnIfLocalIsCurrentlyCloseToADayBoundary(org);\r\n\t\tconst thisMoment = moment.tz(org._ianaTimeZone).startOf('day');\r\n\t\treturn asServerString ? thisMoment.toISOString() : thisMoment;\r\n\t}\r\n\r\n\t/**\r\n\t * Create an ISO string for the time in which the organization's current day ends\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @param {Boolean} asServerString if true then the result will be an ISO string, if false the result will be a Moment object\r\n\t * @returns {String | Moment} the requested ISO string (that the server wants), or (if you request it via asServerString) a moment object for the calculated time\r\n\t */\r\n\tfunction todaysEndRelativeTo(org, asServerString = false) {\r\n\t\t_warnIfLocalIsCurrentlyCloseToADayBoundary(org);\r\n\t\tconst thisMoment = moment.tz(org._ianaTimeZone).endOf('day');\r\n\t\treturn asServerString ? thisMoment.toISOString() : thisMoment;\r\n\t}\r\n\r\n\t/**\r\n\t * Create an ISO string for the time in which the provided day starts in the organization's timezone\r\n\t * @param {Moment} dayAsMoment the Moment object representing the browser DateTime to make safe relative to the org timezone\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @returns {String} the requested ISO string (that the server wants)\r\n\t */\r\n\tfunction startOfDayRelativeTo(dayAsMoment, org) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tconst thisMoment = moment.tz(_momentToJustDay(dayAsMoment, org), org._ianaTimeZone);\r\n\t\treturn thisMoment.startOf('day').toISOString();\r\n\t}\r\n\r\n\t/**\r\n\t * Create an ISO string for the time in which the provided day ends in the organization's timezone\r\n\t * @param {Moment} dayAsMoment the Moment object representing the browser DateTime to make safe relative to the org timezone\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @returns {String} the requested ISO string (that the server wants)\r\n\t */\r\n\tfunction endOfDayRelativeTo(dayAsMoment, org) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tconst relativeEndOfDayMS = dayAsMoment.clone().tz(org._ianaTimeZone).endOf('day').valueOf();\r\n\t\tif(dayAsMoment.valueOf() === relativeEndOfDayMS){\r\n\t\t\t// Since they already have the correct relative value, just pass it back to them\r\n\t\t\treturn dayAsMoment.toISOString();\r\n\t\t}\r\n\t\tconst thisMoment = moment.tz(_momentToJustDay(dayAsMoment, org), org._ianaTimeZone);\r\n\t\treturn thisMoment.endOf('day').toISOString();\r\n\t}\r\n\t//#endregion -- methods for converting objects that are based on DATE RANGES\r\n\r\n\t//#region -- date instance functions\r\n\t/**\r\n\t * Create an as of date at noon org timezone converted to UTC (1/1/2018T12:00:00) that is used for requesting effective dated objects relative to an org\r\n\t * The general use case:\r\n\t * \tGive me the employee directory as of 7/1/2018 for my org (EDT -4:00:00.000).\r\n\t * \t\tTake 7/1/2018 >\r\n\t * \t\tSet hours to 12:00:00H >\r\n\t * \t\tConvert to UTC string - \"7/1/2018T16:00:000\">\r\n\t * \t\tReturn a safe date string that will be sent up as the correct date & time for the query\r\n\t * @param {Moment} dayAsMoment the Moment object representing the browser DateTime to make safe relative to the org timezone\r\n\t * @param {Object} org the organization to which the date will be relative to\r\n\t * @returns {String} the requested dateTime at noon relative to the Org converted to UTC\r\n\t */\r\n\tfunction safeAsOfDateRelativeTo(dayAsMoment, org, asServerString = true) {\r\n\t\tlet safeAsOfDate = moment(startOfDayRelativeTo(dayAsMoment, org)).add(12, 'hours');\r\n\t\treturn asServerString ? safeAsOfDate.toISOString() : safeAsOfDate;\r\n\t}\r\n\t/**\r\n\t * Create a new universal instance in time that is aware of the timezone of the org.\r\n\t * NOTE: toISOString() will still give UTC time. Only .format() will present as the org's timezone\r\n\t * @param {object} org The organization to create a new moment relative to\r\n\t * @returns {moment} The current instance in time with awareness of the organization's timezone\r\n\t */\r\n\tfunction safeNowRelativeTo(org) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\treturn moment.tz(org._ianaTimeZone);\r\n\t}\r\n\t//#endregion -- date instance functions\r\n\r\n\t//#region -- date comparison functions\r\n\tfunction isCurrent({ obj, asOfDate = null, fromProp = '_fromDateUtc', toProp = '_toDateUtc', org }) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tvar dates = _calculateDates({ obj, asOfDate, fromProp, toProp, type: 'isCurrent', org });\r\n\t\t// returns true if asOf is between the dates. Inclusive of both\r\n\t\treturn dates.fromDate.isSameOrBefore(dates.asOf) && dates.toDate.isSameOrAfter(dates.asOf);\r\n\t}\r\n\r\n\tfunction isInPast({ obj, asOfDate = null, fromProp = '_fromDateUtc', toProp = '_toDateUtc', org }) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tvar dates = _calculateDates({ obj, asOfDate, fromProp, toProp, type: 'isPast', org });\r\n\t\treturn dates.fromDate.isBefore(dates.asOf) && dates.toDate.isSameOrBefore(dates.asOf);\r\n\t}\r\n\r\n\tfunction isInFuture({ obj, asOfDate = null, fromProp = '_fromDateUtc', toProp = '_toDateUtc', org }) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tvar dates = _calculateDates({ obj, asOfDate, fromProp, toProp, type: 'isFuture', org });\r\n\t\treturn dates.fromDate.isAfter(dates.asOf) && dates.toDate.isAfter(dates.asOf);\r\n\t}\r\n\t//#endregion -- date comparison functions\r\n\r\n\t//#region -- Private methods\r\n\r\n\tfunction _throwIfNotUtcIsoFormat(testStr, nameOfTestStr = '') {\r\n\t\tif (typeof (testStr) !== 'string') {\r\n\t\t\tthrow TypeError(nameOfTestStr + ' must be a string with length');\r\n\t\t}\r\n\t\tif (!testStr) {\r\n\t\t\tthrow TypeError(nameOfTestStr + ' is falsy');\r\n\t\t}\r\n\t\tif (!testStr.endsWith('Z')) {\r\n\t\t\tthrow Error(nameOfTestStr + ' must be a valid UTC ISO format. It was: ' + testStr);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _throwIfNotValidMoment(testObj, nameOfTestObj = '') {\r\n\t\tif (!moment.isMoment(testObj)) {\r\n\t\t\t$log.error(testObj);\r\n\t\t\tthrow new Error(nameOfTestObj + ' is not a moment object');\r\n\t\t}\r\n\t\tif (testObj._isValid === false) {\r\n\t\t\t$log.error(testObj);\r\n\t\t\tthrow new Error(nameOfTestObj + ' is a moment object, but has an invalid date');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _warnIfLocalIsCurrentlyCloseToADayBoundary(org) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(org);\r\n\t\tconst loggedInUsersTimeZone = moment.tz.guess();\r\n\r\n\t\t// Only show this if the user's local timezone is not the timezone of the user\r\n\t\tif (org._ianaTimeZone !== loggedInUsersTimeZone) {\r\n\t\t\tconst minutesTillStartOfDay = Math.abs(moment().diff(moment().startOf('day'), 'minutes'));\r\n\t\t\tif (minutesTillStartOfDay < 60) {\r\n\t\t\t\t$log.warn(`You may experience strange results in creating the effective date since your local time is close to a day boundary.`);\r\n\t\t\t}\r\n\t\t\tconst minutesTillEndOfDay = Math.abs(moment().diff(moment().endOf('day'), 'minutes'));\r\n\t\t\tif (minutesTillEndOfDay < 60) {\r\n\t\t\t\t$log.warn(`You may experience strange results in creating the effective date since your local time is close to a day boundary.`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _throwIfNotAlreadyStartOrEndOfDay(momentInput, theOrg) {\r\n\t\t_throwIfOrgDoesNotHaveTimeZone(theOrg);\r\n\t\tif (momentInput._z && momentInput._z.name !== theOrg._ianaTimeZone) {\r\n\t\t\tthrow new Error('Unable to provide accurate results due to the fact that your moment input already has timezone sensitive information ' +\r\n\t\t\t\t`(zone name: ${momentInput._z.name}) but we expected the the timezone of ${theOrg._ianaTimeZone} in order to provide accurate results.`);\r\n\t\t}\r\n\t\tconst msOfInput = momentInput.valueOf();\r\n\t\tconst localStartOfDayMS = momentInput.clone().startOf('day').valueOf();\r\n\t\tconst localEndOfDayMS = momentInput.clone().endOf('day').valueOf();\r\n\t\tconst relativeStartOfDayMS = momentInput.clone().tz(theOrg._ianaTimeZone).startOf('day').valueOf();\r\n\t\tconst relativeEndOfDayMS = momentInput.clone().tz(theOrg._ianaTimeZone).endOf('day').valueOf();\r\n\r\n\t\tif(\r\n\t\t\tmsOfInput === localStartOfDayMS || msOfInput === localEndOfDayMS ||\r\n\t\t\tmsOfInput === relativeStartOfDayMS || msOfInput === relativeEndOfDayMS\r\n\t\t){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthrow new Error('This method can only be accurate when provided a day (not a day with times). ' +\r\n\t\t\t'So, please consider investigating why the source of your input provided a time component. ' +\r\n\t\t\t`Or consider using moment.startOf('day') on the input of this function.`);\r\n\t}\r\n\r\n\tfunction _momentToJustDay(momentInput, theOrg) {\r\n\t\t_throwIfNotValidMoment(momentInput);\r\n\t\t_throwIfNotAlreadyStartOrEndOfDay(momentInput, theOrg);\r\n\r\n\t\treturn momentInput.format('YYYY-MM-DD');\r\n\t}\r\n\r\n\tfunction _throwIfOrgDoesNotHaveTimeZone(org) {\r\n\t\tif (!org) {\r\n\t\t\tthrow Error('org was undefined. Please provide a proper input variable.');\r\n\t\t}\r\n\t\tif (!org._ianaTimeZone) {\r\n\t\t\tthrow Error('Organization does not have the ianaTimeZone specified.');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _calculateDates({ obj, asOfDate, fromProp, toProp, type, org }) {\r\n\t\t// These arrays are created to account for the various property names across models\r\n\t\tfunction _getKey(obj, prop) {\r\n\t\t\tif (obj.hasOwnProperty(prop)) { return prop; }\r\n\t\t\telse { return null; }\r\n\t\t}\r\n\t\tif (!obj) { throw new Error(`obj is required.`); }\r\n\t\tlet _fromProp = _getKey(obj, fromProp);\r\n\t\tlet _toProp = _getKey(obj, toProp);\r\n\t\tif (!_fromProp || !_toProp) {\r\n\t\t\tthrow new Error(`your property is not supported by the ${type} method of ssEffectiveDateHlp`);\r\n\t\t}\r\n\r\n\t\tlet asOf = (asOfDate == null) ? safeAsOfDateRelativeTo(todaysStartRelativeTo(org), org, false) : utcIsoToRelativeMoment(asOfDate, org);\r\n\t\tlet fromDate = utcIsoToRelativeMoment(obj[_fromProp], org);\r\n\t\tlet toDate = utcIsoToRelativeMoment(obj[_toProp], org);\r\n\r\n\t\treturn {\r\n\t\t\tasOf,\r\n\t\t\tfromDate,\r\n\t\t\ttoDate\r\n\t\t};\r\n\t}\r\n\r\n\t//#endregion -- Private methods\r\n\r\n\t// #-- END Helper (ssDateByOrgHlp) --# //\r\n\t// #-----------------------------------------# //\r\n};\r\n\r\nangular.module('super-suit-helpers').factory('ssDateByOrgHlp', ssDateByOrgHlp);\r\n"],"names":["ssDateByOrgHlp","moment","$log","utcIsoToRelativeMoment","serverTimeStr","org","serverTimeAsMoment","_ianaTimeZone","Error","timezone","tz","todaysStartRelativeTo","asServerString","thisMoment","startOf","toISOString","startOfDayRelativeTo","dayAsMoment","_momentToJustDay","safeAsOfDateRelativeTo","safeAsOfDate","add","_throwIfNotUtcIsoFormat","testStr","nameOfTestStr","TypeError","endsWith","_throwIfNotValidMoment","testObj","nameOfTestObj","isMoment","error","_isValid","_warnIfLocalIsCurrentlyCloseToADayBoundary","Math","abs","loggedInUsersTimeZone","guess","minutesTillStartOfDay","diff","warn","minutesTillEndOfDay","endOf","_throwIfNotAlreadyStartOrEndOfDay","momentInput","theOrg","_z","name","msOfInput","valueOf","localStartOfDayMS","clone","localEndOfDayMS","relativeStartOfDayMS","relativeEndOfDayMS","format","_throwIfOrgDoesNotHaveTimeZone","_calculateDates","_getKey","obj","prop","hasOwnProperty","asOfDate","fromProp","toProp","type","_fromProp","_toProp","asOf","fromDate","toDate","dates","isSameOrBefore","isSameOrAfter","isBefore","isAfter","angular","module","factory"],"mappings":"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"}